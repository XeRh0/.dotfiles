#!/usr/bin/env perl

# ------------------------------------------------------------------------------
# use
# ------------------------------------------------------------------------------

use Cwd 'abs_path';
use File::Basename;
use Getopt::Long;
use JSON::PP;
use strict;
use warnings;

# ------------------------------------------------------------------------------
# Getopt configuration
# ------------------------------------------------------------------------------

# force case-sensitive options 
Getopt::Long::Configure("no_ignore_case");

# allows -abc to be parsed as -a -b -c
# Getopt::Long::Configure("bundling"); disabled for now, not sure if I like it

# prevent parsing after first non-option
Getopt::Long::Configure("require_order");

# prevent accepting -long as --long
Getopt::Long::Configure("gnu_compat");

# ------------------------------------------------------------------------------
# variables
# ------------------------------------------------------------------------------

# Initial script location after pull
my $CURRENT_LOCATION = abs_path($0);

# Initial .dotfiles location after pull
my $CLONED_DOTFILES_LOCATION = abs_path(dirname($CURRENT_LOCATION));

# Path where the dotfiles directory should be
my $DOTFILES_LOCATION ;
my $DOTFILES_LOCATION_CHECK = 1;

if(defined $ENV{HOME}) {
  $DOTFILES_LOCATION = abs_path("$ENV{HOME}/.dotfiles");
} else {
  $DOTFILES_LOCATION_CHECK = 0;
}

# Path where the script should be
my $SCRIPT_LOCATION = "/usr/local/bin/dotfile_sync";

# Path where the script data should be
my $XDG_DATA_HOME;
my $XDG_DATA_HOME_CHECK = 1;

if(defined $ENV{XDG_DATA_HOME}) {
  $XDG_DATA_HOME = $ENV{XDG_DATA_HOME};
} elsif (defined $ENV{HOME}) {
  $XDG_DATA_HOME = "$ENV{HOME}/.local/share";
} else {
  $XDG_DATA_HOME_CHECK = 1;
}

my $SCRIPT_DATA_DIRECTORY= "$XDG_DATA_HOME/dotfile_sync";

# ------------------------------------------------------------------------------
# subroutines
# ------------------------------------------------------------------------------

my sub debug() {
  print("=================> [path variables] <=================\n");
  print("Current location:         $CURRENT_LOCATION\n");
  print("Cloned Dotfiles location: $CLONED_DOTFILES_LOCATION\n");
  print("Dotfiles location:        $DOTFILES_LOCATION\n");
  print(
        "DOTFILES_LOCATION_CHECK:  ", 
        ($DOTFILES_LOCATION_CHECK == 1) ? "TRUE\n" : "FALSE\n"
       );
  print("Script location:          $SCRIPT_LOCATION\n");
  print("XDG_DATA_HOME:            $XDG_DATA_HOME\n");
  print(
        "XDG_DATA_HOME_CHECK:      ", 
        ($XDG_DATA_HOME_CHECK == 1) ? "TRUE\n" : "FALSE\n"
       );
  print("Script data directory:    $SCRIPT_DATA_DIRECTORY\n");
  print("======================================================\n");
}

my sub print_help() {
  print("yikes!\n");
}

# ------------------------------------------------------------------------------
# main
# ------------------------------------------------------------------------------

my $DEBUG_FLAG = 0;
my $HELP_FLAG = 0;

GetOptions(
  "debug|d" => \$DEBUG_FLAG,
  # todo: implement all of these lmao
  # "install" => \$install
  # "uninstall" => \$uninstall
  # "pull" => \$pull
  # "push" => \$push
  "help|h" => \$HELP_FLAG,
  # ...
) or do {
  print_help();
  exit(1);
};

if($HELP_FLAG == 1) {
  print_help();
  shift(@ARGV);
  exit(0);
}

if (@ARGV) {
  print "Unknown argument(s): @ARGV\n";
  print_help();
  exit(1);
}

exit(0);
